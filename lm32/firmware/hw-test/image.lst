
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000760  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       0000018c  00000760  00000760  000007b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  000008ec  000008ec  00000940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000008c  00000900  00000900  00000954  2**2
                  ALLOC
  4 .debug_frame  00000198  00000000  00000000  00000954  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000931  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003fc  00000000  00000000  0000141d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000002dd  00000000  00000000  00001819  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000048  00000000  00000000  00001af6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000050  00000000  00000000  00001b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000cea  00000000  00000000  00001b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000269  00000000  00000000  00002878  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000012  00000000  00000000  00002ae1  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 01 1f 	calli 548 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 09 00 	ori gp,gp,0x900
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 09 00 	ori r1,r1,0x900
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 09 8c 	ori r3,r3,0x98c

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 5d 	calli 2b0 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <writeint>:
 */

#include "soc-hw.h"

void writeint(uint32_t val)
{
 208:	37 9c ff f0 	addi sp,sp,-16
 20c:	5b 8b 00 10 	sw (sp+16),r11
 210:	5b 8c 00 0c 	sw (sp+12),r12
 214:	5b 8d 00 08 	sw (sp+8),r13
 218:	5b 9d 00 04 	sw (sp+4),ra
 21c:	34 0c 00 08 	mvi r12,8
 220:	b8 20 58 00 	mv r11,r1
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
 224:	34 0d 00 09 	mvi r13,9
		digit = (val & 0xf0000000) >> 28;
 228:	01 62 00 1c 	srui r2,r11,28
		if (digit >= 0xA) 
 22c:	51 a2 00 0c 	bgeu r13,r2,25c <writeint+0x54>
			uart_putchar('A'+digit-10);
 230:	34 41 00 37 	addi r1,r2,55
 234:	f8 00 01 33 	calli 700 <uart_putchar>
	for (i=0; i<8; i++) {
 238:	35 8c ff ff 	addi r12,r12,-1
		else
			uart_putchar('0'+digit);
		val <<= 4;
 23c:	3d 6b 00 04 	sli r11,r11,4
	for (i=0; i<8; i++) {
 240:	5d 80 ff fa 	bne r12,r0,228 <writeint+0x20>
	}
}
 244:	2b 9d 00 04 	lw ra,(sp+4)
 248:	2b 8b 00 10 	lw r11,(sp+16)
 24c:	2b 8c 00 0c 	lw r12,(sp+12)
 250:	2b 8d 00 08 	lw r13,(sp+8)
 254:	37 9c 00 10 	addi sp,sp,16
 258:	c3 a0 00 00 	ret
			uart_putchar('0'+digit);
 25c:	34 41 00 30 	addi r1,r2,48
 260:	f8 00 01 28 	calli 700 <uart_putchar>
 264:	e3 ff ff f5 	bi 238 <writeint+0x30>

00000268 <test2>:

void test2() {
 268:	37 9c ff fc 	addi sp,sp,-4
 26c:	5b 9d 00 04 	sw (sp+4),ra
    uart_putchar('b');   
 270:	34 01 00 62 	mvi r1,98
 274:	f8 00 01 23 	calli 700 <uart_putchar>
}
 278:	2b 9d 00 04 	lw ra,(sp+4)
 27c:	37 9c 00 04 	addi sp,sp,4
 280:	c3 a0 00 00 	ret

00000284 <test>:

void test() {
 284:	37 9c ff fc 	addi sp,sp,-4
 288:	5b 9d 00 04 	sw (sp+4),ra
    uart_putchar('a');
 28c:	34 01 00 61 	mvi r1,97
 290:	f8 00 01 1c 	calli 700 <uart_putchar>
    uart_putchar('b');   
 294:	34 01 00 62 	mvi r1,98
 298:	f8 00 01 1a 	calli 700 <uart_putchar>
    test2();
    uart_putchar('c');
 29c:	34 01 00 63 	mvi r1,99
 2a0:	f8 00 01 18 	calli 700 <uart_putchar>
} 
 2a4:	2b 9d 00 04 	lw ra,(sp+4)
 2a8:	37 9c 00 04 	addi sp,sp,4
 2ac:	c3 a0 00 00 	ret

000002b0 <main>:
volatile uint8_t *p2;

extern uint32_t tic_msec;

int main()
{
 2b0:	37 9c ff dc 	addi sp,sp,-36
 2b4:	5b 8b 00 18 	sw (sp+24),r11
 2b8:	5b 8c 00 14 	sw (sp+20),r12
 2bc:	5b 8d 00 10 	sw (sp+16),r13
 2c0:	5b 8e 00 0c 	sw (sp+12),r14
 2c4:	5b 8f 00 08 	sw (sp+8),r15
 2c8:	5b 9d 00 04 	sw (sp+4),ra
    char test2[] = "Lokalerstr";
 2cc:	38 01 6b 61 	mvu r1,0x6b61
 2d0:	78 21 4c 6f 	orhi r1,r1,0x4c6f
 2d4:	5b 81 00 1c 	sw (sp+28),r1
 2d8:	38 01 72 73 	mvu r1,0x7273
 2dc:	78 21 6c 65 	orhi r1,r1,0x6c65
 2e0:	5b 81 00 20 	sw (sp+32),r1
 2e4:	34 01 74 72 	mvi r1,29810
 2e8:	0f 81 00 24 	sh (sp+36),r1
 2ec:	33 80 00 26 	sb (sp+38),r0
//    for (i = 0; i < 4; i++)
 //       test2[i] = 'l';
  //  glob[0]  = 'g';
    
 	// Initialize stuff
	uart_init();
 2f0:	f8 00 00 f9 	calli 6d4 <uart_init>

	// Say Hello!
	uart_putstr( "** Spike Test Firmware **\n" );
 2f4:	78 02 00 00 	mvhi r2,0x0
 2f8:	38 42 08 64 	ori r2,r2,0x864
 2fc:	28 41 00 00 	lw r1,(r2+0)
    char *str = test2;
 300:	37 8b 00 1c 	addi r11,sp,28
	uart_putstr( "** Spike Test Firmware **\n" );
 304:	f8 00 01 09 	calli 728 <uart_putstr>

	// Initialize TIC
	isr_init();
 308:	f8 00 00 a7 	calli 5a4 <isr_init>
	tic_init();
 30c:	f8 00 00 dd 	calli 680 <tic_init>
	irq_set_mask( 0x00000002 );
 310:	34 01 00 02 	mvi r1,2
 314:	fb ff ff 91 	calli 158 <irq_set_mask>
	irq_enable();
 318:	fb ff ff 8a 	calli 140 <irq_enable>

	// Say Hello!
	uart_putstr( "Timer Interrupt instelled.\n" );
 31c:	78 02 00 00 	mvhi r2,0x0
 320:	38 42 08 68 	ori r2,r2,0x868
 324:	28 41 00 00 	lw r1,(r2+0)
 328:	f8 00 01 00 	calli 728 <uart_putstr>

	// Do some trivial tests
	uart_putstr( "Subroutine-Return Test: " );
 32c:	78 02 00 00 	mvhi r2,0x0
 330:	38 42 08 6c 	ori r2,r2,0x86c
 334:	28 41 00 00 	lw r1,(r2+0)
 338:	f8 00 00 fc 	calli 728 <uart_putstr>
	test();
 33c:	fb ff ff d2 	calli 284 <test>
	uart_putchar('\n');    
 340:	34 01 00 0a 	mvi r1,10
 344:	f8 00 00 ef 	calli 700 <uart_putchar>

	uart_putstr( "Local-Pointer Test:" );
 348:	78 02 00 00 	mvhi r2,0x0
 34c:	38 42 08 70 	ori r2,r2,0x870
 350:	28 41 00 00 	lw r1,(r2+0)
 354:	f8 00 00 f5 	calli 728 <uart_putstr>
	for (;*str; str++) {
 358:	34 01 00 4c 	mvi r1,76
 35c:	35 6b 00 01 	addi r11,r11,1
	   uart_putchar(*str);
 360:	f8 00 00 e8 	calli 700 <uart_putchar>
	for (;*str; str++) {
 364:	41 61 00 00 	lbu r1,(r11+0)
 368:	5c 20 ff fd 	bne r1,r0,35c <main+0xac>
	}
	uart_putchar('\n');    
 36c:	34 01 00 0a 	mvi r1,10
 370:	f8 00 00 e4 	calli 700 <uart_putchar>
	
	uart_putstr( "Global-Pointer Test:" );
 374:	78 02 00 00 	mvhi r2,0x0
 378:	38 42 08 74 	ori r2,r2,0x874
 37c:	28 41 00 00 	lw r1,(r2+0)
 380:	f8 00 00 ea 	calli 728 <uart_putstr>
	str = glob;
	for (;*str; str++) {
 384:	78 01 00 00 	mvhi r1,0x0
 388:	38 21 08 78 	ori r1,r1,0x878
 38c:	28 2b 00 00 	lw r11,(r1+0)
 390:	41 61 00 00 	lbu r1,(r11+0)
 394:	44 20 00 05 	be r1,r0,3a8 <main+0xf8>
 398:	35 6b 00 01 	addi r11,r11,1
	   uart_putchar(*str);
 39c:	f8 00 00 d9 	calli 700 <uart_putchar>
	for (;*str; str++) {
 3a0:	41 61 00 00 	lbu r1,(r11+0)
 3a4:	5c 20 ff fd 	bne r1,r0,398 <main+0xe8>
	}
	uart_putchar('\n');    
 3a8:	34 01 00 0a 	mvi r1,10
 3ac:	f8 00 00 d5 	calli 700 <uart_putchar>

	uart_putstr( "Stack Pointer : " );
 3b0:	78 02 00 00 	mvhi r2,0x0
 3b4:	38 42 08 7c 	ori r2,r2,0x87c
 3b8:	28 41 00 00 	lw r1,(r2+0)
//	writeint(get_gp());
	uart_putchar('\n');    

	uart_putstr( "Timer Test (1s): " );
	for(i=0; i<4; i++) {
		uart_putstr("tic...");    
 3bc:	78 02 00 00 	mvhi r2,0x0
 3c0:	38 42 08 80 	ori r2,r2,0x880
 3c4:	28 4c 00 00 	lw r12,(r2+0)
	uart_putstr( "Stack Pointer : " );
 3c8:	f8 00 00 d8 	calli 728 <uart_putstr>
	uart_putchar('\n');    
 3cc:	34 01 00 0a 	mvi r1,10
 3d0:	f8 00 00 cc 	calli 700 <uart_putchar>
	uart_putstr( "Global Pointer: " );
 3d4:	78 02 00 00 	mvhi r2,0x0
 3d8:	38 42 08 84 	ori r2,r2,0x884
 3dc:	28 41 00 00 	lw r1,(r2+0)
	uart_putstr( "Timer Test (1s): " );
 3e0:	34 0b 00 04 	mvi r11,4
	uart_putstr( "Global Pointer: " );
 3e4:	f8 00 00 d1 	calli 728 <uart_putstr>
	uart_putchar('\n');    
 3e8:	34 01 00 0a 	mvi r1,10
 3ec:	f8 00 00 c5 	calli 700 <uart_putchar>
	uart_putstr( "Timer Test (1s): " );
 3f0:	78 02 00 00 	mvhi r2,0x0
 3f4:	38 42 08 88 	ori r2,r2,0x888
 3f8:	28 41 00 00 	lw r1,(r2+0)
 3fc:	f8 00 00 cb 	calli 728 <uart_putstr>
		uart_putstr("tic...");    
 400:	b9 80 08 00 	mv r1,r12
 404:	f8 00 00 c9 	calli 728 <uart_putstr>
	for(i=0; i<4; i++) {
 408:	35 6b ff ff 	addi r11,r11,-1
		msleep(1000);
 40c:	34 01 03 e8 	mvi r1,1000
 410:	f8 00 00 81 	calli 614 <msleep>
	for(i=0; i<4; i++) {
 414:	5d 60 ff fb 	bne r11,r0,400 <main+0x150>
	}
	uart_putchar('\n');    
 418:	34 01 00 0a 	mvi r1,10
 41c:	f8 00 00 b9 	calli 700 <uart_putchar>

	uart_putstr( "Timer Interrupt counter: " );
 420:	78 02 00 00 	mvhi r2,0x0
 424:	38 42 08 8c 	ori r2,r2,0x88c
 428:	28 41 00 00 	lw r1,(r2+0)
	writeint( tic_msec );
 42c:	78 02 00 00 	mvhi r2,0x0
 430:	38 42 08 90 	ori r2,r2,0x890
 434:	28 4b 00 00 	lw r11,(r2+0)
	uart_putstr( "Timer Interrupt counter: " );
 438:	f8 00 00 bc 	calli 728 <uart_putstr>
	uart_putchar('\n');    

	int val = tic_msec;
	uart_putstr( "Shift: " );
	writeint( val );
	uart_putstr(" <-> ");    
 43c:	34 0c 00 20 	mvi r12,32
	writeint( tic_msec );
 440:	29 61 00 00 	lw r1,(r11+0)
 444:	fb ff ff 71 	calli 208 <writeint>
	uart_putchar('\n');    
 448:	34 01 00 0a 	mvi r1,10
 44c:	f8 00 00 ad 	calli 700 <uart_putchar>
	uart_putstr( "Shift: " );
 450:	78 02 00 00 	mvhi r2,0x0
 454:	38 42 08 94 	ori r2,r2,0x894
 458:	28 41 00 00 	lw r1,(r2+0)
	int val = tic_msec;
 45c:	29 6b 00 00 	lw r11,(r11+0)
	uart_putstr( "Shift: " );
 460:	f8 00 00 b2 	calli 728 <uart_putstr>
	writeint( val );
 464:	b9 60 08 00 	mv r1,r11
 468:	fb ff ff 68 	calli 208 <writeint>
	uart_putstr(" <-> ");    
 46c:	78 02 00 00 	mvhi r2,0x0
 470:	38 42 08 98 	ori r2,r2,0x898
 474:	28 41 00 00 	lw r1,(r2+0)
 478:	f8 00 00 ac 	calli 728 <uart_putstr>
	for(i=0; i<32; i++) {
		if (val & 0x80000000)
			uart_putchar( '1' );
		else
			uart_putchar( '0' );
 47c:	34 01 00 30 	mvi r1,48
		if (val & 0x80000000)
 480:	4d 60 00 22 	bge r11,r0,508 <main+0x258>
			uart_putchar( '1' );
 484:	34 01 00 31 	mvi r1,49
 488:	f8 00 00 9e 	calli 700 <uart_putchar>
	for(i=0; i<32; i++) {
 48c:	35 8c ff ff 	addi r12,r12,-1
			
		val <<= 1;
 490:	3d 6b 00 01 	sli r11,r11,1
	for(i=0; i<32; i++) {
 494:	5d 80 ff fa 	bne r12,r0,47c <main+0x1cc>
	}
	uart_putstr("\r\n");
 498:	78 02 00 00 	mvhi r2,0x0
 49c:	38 42 08 9c 	ori r2,r2,0x89c
 4a0:	28 41 00 00 	lw r1,(r2+0)
	
	uart_putstr( "GPIO Test..." );
	gpio0->oe = 0x000000ff;
 4a4:	78 02 00 00 	mvhi r2,0x0
 4a8:	38 42 08 a0 	ori r2,r2,0x8a0
 4ac:	28 4c 00 00 	lw r12,(r2+0)
	uart_putstr("\r\n");
 4b0:	f8 00 00 9e 	calli 728 <uart_putstr>
	uart_putstr( "GPIO Test..." );
 4b4:	78 02 00 00 	mvhi r2,0x0
 4b8:	38 42 08 a4 	ori r2,r2,0x8a4
 4bc:	28 41 00 00 	lw r1,(r2+0)
	for(;;) {
		for(i=0; i<8; i++) {
			uint32_t out1, out2;

			out1 = 0x01 << i;
 4c0:	34 0f 00 01 	mvi r15,1
			out2 = 0x80 >> i;
 4c4:	34 0e 00 80 	mvi r14,128
	uart_putstr( "GPIO Test..." );
 4c8:	f8 00 00 98 	calli 728 <uart_putstr>
	gpio0->oe = 0x000000ff;
 4cc:	29 83 00 00 	lw r3,(r12+0)
 4d0:	34 01 00 ff 	mvi r1,255
		for(i=0; i<8; i++) {
 4d4:	34 0d 00 08 	mvi r13,8
	gpio0->oe = 0x000000ff;
 4d8:	58 61 00 18 	sw (r3+24),r1
		for(i=0; i<8; i++) {
 4dc:	34 0b 00 00 	mvi r11,0
			out2 = 0x80 >> i;
 4e0:	95 cb 20 00 	sr r4,r14,r11
			out1 = 0x01 << i;
 4e4:	bd eb 10 00 	sl r2,r15,r11
			gpio0->out = out1 | out2;

			msleep(100);
 4e8:	34 01 00 64 	mvi r1,100
			gpio0->out = out1 | out2;
 4ec:	b8 44 10 00 	or r2,r2,r4
 4f0:	58 62 00 14 	sw (r3+20),r2
			msleep(100);
 4f4:	f8 00 00 48 	calli 614 <msleep>
		for(i=0; i<8; i++) {
 4f8:	35 6b 00 01 	addi r11,r11,1
			gpio0->out = out1 | out2;
 4fc:	29 83 00 00 	lw r3,(r12+0)
		for(i=0; i<8; i++) {
 500:	5d 6d ff f8 	bne r11,r13,4e0 <main+0x230>
 504:	e3 ff ff f6 	bi 4dc <main+0x22c>
			uart_putchar( '0' );
 508:	f8 00 00 7e 	calli 700 <uart_putchar>
 50c:	e3 ff ff e0 	bi 48c <main+0x1dc>

00000510 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 510:	78 01 00 00 	mvhi r1,0x0
 514:	38 21 08 a8 	ori r1,r1,0x8a8
 518:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 51c:	78 04 00 00 	mvhi r4,0x0
 520:	38 84 08 ac 	ori r4,r4,0x8ac
 524:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 528:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 52c:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 530:	34 21 00 01 	addi r1,r1,1
 534:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 538:	34 01 00 0e 	mvi r1,14
 53c:	58 61 00 00 	sw (r3+0),r1
}
 540:	c3 a0 00 00 	ret

00000544 <isr_null>:
 544:	c3 a0 00 00 	ret

00000548 <irq_handler>:
{
 548:	37 9c ff f0 	addi sp,sp,-16
 54c:	5b 8b 00 10 	sw (sp+16),r11
 550:	5b 8c 00 0c 	sw (sp+12),r12
 554:	5b 8d 00 08 	sw (sp+8),r13
 558:	5b 9d 00 04 	sw (sp+4),ra
	for(i=0; i<32; i++) {
 55c:	78 02 00 00 	mvhi r2,0x0
 560:	38 42 08 b0 	ori r2,r2,0x8b0
 564:	28 4b 00 00 	lw r11,(r2+0)
{
 568:	b8 20 60 00 	mv r12,r1
	for(i=0; i<32; i++) {
 56c:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 570:	21 81 00 01 	andi r1,r12,0x1
 574:	44 20 00 03 	be r1,r0,580 <irq_handler+0x38>
 578:	29 61 00 00 	lw r1,(r11+0)
 57c:	d8 20 00 00 	call r1
	for(i=0; i<32; i++) {
 580:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 584:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 588:	5d ab ff fa 	bne r13,r11,570 <irq_handler+0x28>
}
 58c:	2b 9d 00 04 	lw ra,(sp+4)
 590:	2b 8b 00 10 	lw r11,(sp+16)
 594:	2b 8c 00 0c 	lw r12,(sp+12)
 598:	2b 8d 00 08 	lw r13,(sp+8)
 59c:	37 9c 00 10 	addi sp,sp,16
 5a0:	c3 a0 00 00 	ret

000005a4 <isr_init>:
	for(i=0; i<32; i++)
 5a4:	78 02 00 00 	mvhi r2,0x0
 5a8:	38 42 08 b4 	ori r2,r2,0x8b4
 5ac:	28 41 00 00 	lw r1,(r2+0)
 5b0:	78 02 00 00 	mvhi r2,0x0
 5b4:	38 42 08 b8 	ori r2,r2,0x8b8
 5b8:	28 43 00 00 	lw r3,(r2+0)
 5bc:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 5c0:	58 23 00 00 	sw (r1+0),r3
	for(i=0; i<32; i++)
 5c4:	34 21 00 04 	addi r1,r1,4
 5c8:	5c 22 ff fe 	bne r1,r2,5c0 <isr_init+0x1c>
}
 5cc:	c3 a0 00 00 	ret

000005d0 <isr_register>:
	isr_table[irq] = isr;
 5d0:	78 04 00 00 	mvhi r4,0x0
 5d4:	38 84 08 bc 	ori r4,r4,0x8bc
 5d8:	3c 23 00 02 	sli r3,r1,2
 5dc:	28 81 00 00 	lw r1,(r4+0)
 5e0:	b4 23 08 00 	add r1,r1,r3
 5e4:	58 22 00 00 	sw (r1+0),r2
}
 5e8:	c3 a0 00 00 	ret

000005ec <isr_unregister>:
	isr_table[irq] = &isr_null;
 5ec:	78 03 00 00 	mvhi r3,0x0
 5f0:	38 63 08 c0 	ori r3,r3,0x8c0
 5f4:	3c 22 00 02 	sli r2,r1,2
 5f8:	28 61 00 00 	lw r1,(r3+0)
 5fc:	78 03 00 00 	mvhi r3,0x0
 600:	38 63 08 c4 	ori r3,r3,0x8c4
 604:	b4 22 08 00 	add r1,r1,r2
 608:	28 62 00 00 	lw r2,(r3+0)
 60c:	58 22 00 00 	sw (r1+0),r2
}
 610:	c3 a0 00 00 	ret

00000614 <msleep>:
	timer0->compare1 = (FCPU/1000)*msec;
 614:	78 03 00 00 	mvhi r3,0x0
 618:	38 63 08 c8 	ori r3,r3,0x8c8
 61c:	28 62 00 00 	lw r2,(r3+0)
 620:	38 03 c3 50 	mvu r3,0xc350
 624:	88 23 08 00 	mul r1,r1,r3
 628:	28 42 00 00 	lw r2,(r2+0)
 62c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 630:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 634:	34 01 00 08 	mvi r1,8
 638:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 63c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 640:	20 21 00 01 	andi r1,r1,0x1
 644:	44 20 ff fe 	be r1,r0,63c <msleep+0x28>
}
 648:	c3 a0 00 00 	ret

0000064c <nsleep>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 64c:	78 03 00 00 	mvhi r3,0x0
 650:	38 63 08 cc 	ori r3,r3,0x8cc
 654:	28 62 00 00 	lw r2,(r3+0)
 658:	08 21 00 32 	muli r1,r1,50
 65c:	28 42 00 00 	lw r2,(r2+0)
 660:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 664:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 668:	34 01 00 08 	mvi r1,8
 66c:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 670:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 674:	20 21 00 01 	andi r1,r1,0x1
 678:	44 20 ff fe 	be r1,r0,670 <nsleep+0x24>
}
 67c:	c3 a0 00 00 	ret

00000680 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 680:	78 02 00 00 	mvhi r2,0x0
 684:	38 42 08 d0 	ori r2,r2,0x8d0
 688:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 68c:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 690:	34 02 13 88 	mvi r2,5000
 694:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 698:	38 63 08 d4 	ori r3,r3,0x8d4
	timer0->compare0 = (FCPU/10000);
 69c:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 6a0:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 6a4:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 6a8:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 6ac:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 6b0:	34 02 00 0e 	mvi r2,14
 6b4:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 6b8:	78 02 00 00 	mvhi r2,0x0
 6bc:	38 42 08 d8 	ori r2,r2,0x8d8
 6c0:	38 63 08 dc 	ori r3,r3,0x8dc
 6c4:	28 41 00 00 	lw r1,(r2+0)
 6c8:	28 62 00 00 	lw r2,(r3+0)
 6cc:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 6d0:	c3 a0 00 00 	ret

000006d4 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 6d4:	c3 a0 00 00 	ret

000006d8 <uart_getchar>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 6d8:	78 02 00 00 	mvhi r2,0x0
 6dc:	38 42 08 e0 	ori r2,r2,0x8e0
 6e0:	28 41 00 00 	lw r1,(r2+0)
 6e4:	28 22 00 00 	lw r2,(r1+0)
 6e8:	28 41 00 00 	lw r1,(r2+0)
 6ec:	20 21 00 01 	andi r1,r1,0x1
 6f0:	44 20 ff fe 	be r1,r0,6e8 <uart_getchar+0x10>
	return uart0->rxtx;
 6f4:	28 41 00 04 	lw r1,(r2+4)
}
 6f8:	20 21 00 ff 	andi r1,r1,0xff
 6fc:	c3 a0 00 00 	ret

00000700 <uart_putchar>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 700:	78 03 00 00 	mvhi r3,0x0
 704:	38 63 08 e4 	ori r3,r3,0x8e4
 708:	28 62 00 00 	lw r2,(r3+0)
{
 70c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 710:	28 43 00 00 	lw r3,(r2+0)
 714:	28 62 00 00 	lw r2,(r3+0)
 718:	20 42 00 10 	andi r2,r2,0x10
 71c:	5c 40 ff fe 	bne r2,r0,714 <uart_putchar+0x14>
	uart0->rxtx = c;
 720:	58 61 00 04 	sw (r3+4),r1
}
 724:	c3 a0 00 00 	ret

00000728 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 728:	40 24 00 00 	lbu r4,(r1+0)
 72c:	44 80 00 0c 	be r4,r0,75c <uart_putstr+0x34>
	while (uart0->ucr & UART_BUSY) ;
 730:	78 03 00 00 	mvhi r3,0x0
 734:	38 63 08 e8 	ori r3,r3,0x8e8
 738:	28 62 00 00 	lw r2,(r3+0)
 73c:	28 43 00 00 	lw r3,(r2+0)
 740:	28 62 00 00 	lw r2,(r3+0)
 744:	20 42 00 10 	andi r2,r2,0x10
 748:	5c 40 ff fe 	bne r2,r0,740 <uart_putstr+0x18>
	uart0->rxtx = c;
 74c:	58 64 00 04 	sw (r3+4),r4
	while(*c) {
 750:	40 24 00 01 	lbu r4,(r1+1)
		uart_putchar(*c);
		c++;
 754:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 758:	5c 80 ff fa 	bne r4,r0,740 <uart_putstr+0x18>
	}
}
 75c:	c3 a0 00 00 	ret
