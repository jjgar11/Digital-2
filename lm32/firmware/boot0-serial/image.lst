
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fc  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000024  000002fc  000002fc  00000350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000000c  00000320  00000320  00000374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000004  0000032c  0000032c  00000380  2**2
                  ALLOC
  4 .debug_frame  000000d8  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   00000708  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 00000306  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_loc    000002ad  00000000  00000000  00000e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000048  00000000  00000000  00001113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_ranges 00000060  00000000  00000000  0000115b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line   000008f1  00000000  00000000  000011bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    000001e8  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment      00000013  00000000  00000000  00001c94  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 03 	calli 20 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_crt0>:
  20:	78 1c 00 00 	mvhi sp,0x0
  24:	3b 9c 0f fc 	ori sp,sp,0xffc
  28:	78 1a 00 00 	mvhi gp,0x0
  2c:	3b 5a 03 30 	ori gp,gp,0x330
  30:	78 01 00 00 	mvhi r1,0x0
  34:	38 21 03 2c 	ori r1,r1,0x32c
  38:	78 03 00 00 	mvhi r3,0x0
  3c:	38 63 03 30 	ori r3,r3,0x330

00000040 <.clearBSS>:
  40:	44 23 00 04 	be r1,r3,50 <.callMain>
  44:	58 20 00 00 	sw (r1+0),r0
  48:	34 21 00 04 	addi r1,r1,4
  4c:	e3 ff ff fd 	bi 40 <.clearBSS>

00000050 <.callMain>:
  50:	34 01 00 00 	mvi r1,0
  54:	34 02 00 00 	mvi r2,0
  58:	34 03 00 00 	mvi r3,0
  5c:	f8 00 00 1c 	calli cc <main>

00000060 <irq_enable>:
  60:	34 01 00 01 	mvi r1,1
  64:	d0 01 00 00 	wcsr IE,r1
  68:	c3 a0 00 00 	ret

0000006c <irq_mask>:
  6c:	34 01 00 0f 	mvi r1,15
  70:	d0 21 00 00 	wcsr IM,r1
  74:	c3 a0 00 00 	ret

00000078 <irq_disable>:
  78:	34 01 00 00 	mvi r1,0
  7c:	d0 01 00 00 	wcsr IE,r1
  80:	c3 a0 00 00 	ret

00000084 <jump>:
  84:	c0 20 00 00 	b r1

00000088 <halt>:
  88:	e0 00 00 00 	bi 88 <halt>

0000008c <read_uint32>:
 */
#include "soc-hw.h"

/* prototypes */
uint32_t read_uint32()
{
  8c:	37 9c ff f4 	addi sp,sp,-12
  90:	5b 8b 00 0c 	sw (sp+12),r11
  94:	5b 8c 00 08 	sw (sp+8),r12
  98:	5b 9d 00 04 	sw (sp+4),ra
  9c:	34 0c 00 04 	mvi r12,4
	uint32_t val = 0, i;
  a0:	34 01 00 00 	mvi r1,0

    for (i = 0; i < 4; i++) {
        val <<= 8;
  a4:	3c 2b 00 08 	sli r11,r1,8
        val += (uint8_t)uart_getchar();
  a8:	35 8c ff ff 	addi r12,r12,-1
  ac:	f8 00 00 72 	calli 274 <uart_getchar>
  b0:	b4 2b 08 00 	add r1,r1,r11
    for (i = 0; i < 4; i++) {
  b4:	5d 80 ff fc 	bne r12,r0,a4 <read_uint32+0x18>
    }

    return val;
}
  b8:	2b 9d 00 04 	lw ra,(sp+4)
  bc:	2b 8b 00 0c 	lw r11,(sp+12)
  c0:	2b 8c 00 08 	lw r12,(sp+8)
  c4:	37 9c 00 0c 	addi sp,sp,12
  c8:	c3 a0 00 00 	ret

000000cc <main>:

int main(int argc, char **argv)
{
  cc:	37 9c ff e0 	addi sp,sp,-32
  d0:	5b 8b 00 20 	sw (sp+32),r11
  d4:	5b 8c 00 1c 	sw (sp+28),r12
  d8:	5b 8d 00 18 	sw (sp+24),r13
  dc:	5b 8e 00 14 	sw (sp+20),r14
  e0:	5b 8f 00 10 	sw (sp+16),r15
  e4:	5b 90 00 0c 	sw (sp+12),r16
  e8:	5b 91 00 08 	sw (sp+8),r17
  ec:	5b 9d 00 04 	sw (sp+4),ra
    		case 'g': // goto
    			start = read_uint32();
    			jump(start);
    			break;   
		default:
			uart_putstr("LM32 >\r\n");
  f0:	78 01 00 00 	mvhi r1,0x0
  f4:	38 21 03 08 	ori r1,r1,0x308
  f8:	28 30 00 00 	lw r16,(r1+0)
	uart_init();
  fc:	f8 00 00 5d 	calli 270 <uart_init>
		switch (c) {
 100:	34 0f 00 67 	mvi r15,103
	c = '*'; // print msg on first iteration
 104:	34 01 00 2a 	mvi r1,42
		switch (c) {
 108:	34 0e 00 75 	mvi r14,117
 10c:	34 0d 00 64 	mvi r13,100
 110:	44 2f 00 07 	be r1,r15,12c <main+0x60>
 114:	44 2e 00 25 	be r1,r14,1a8 <main+0xdc>
 118:	44 2d 00 0f 	be r1,r13,154 <main+0x88>
			uart_putstr("LM32 >\r\n");
 11c:	ba 00 08 00 	mv r1,r16
 120:	f8 00 00 69 	calli 2c4 <uart_putstr>
			break;
		};
		c = uart_getchar();
 124:	f8 00 00 54 	calli 274 <uart_getchar>
		switch (c) {
 128:	5c 2f ff fb 	bne r1,r15,114 <main+0x48>
 12c:	34 0c 00 04 	mvi r12,4
 130:	34 01 00 00 	mvi r1,0
        val <<= 8;
 134:	3c 2b 00 08 	sli r11,r1,8
        val += (uint8_t)uart_getchar();
 138:	35 8c ff ff 	addi r12,r12,-1
 13c:	f8 00 00 4e 	calli 274 <uart_getchar>
 140:	b4 2b 08 00 	add r1,r1,r11
    for (i = 0; i < 4; i++) {
 144:	5d 80 ff fc 	bne r12,r0,134 <main+0x68>
    			jump(start);
 148:	fb ff ff cf 	calli 84 <jump>
		c = uart_getchar();
 14c:	f8 00 00 4a 	calli 274 <uart_getchar>
	for(;;) {
 150:	e3 ff ff f6 	bi 128 <main+0x5c>
		switch (c) {
 154:	34 0c 00 04 	mvi r12,4
 158:	34 0b 00 00 	mvi r11,0
        val <<= 8;
 15c:	3d 6b 00 08 	sli r11,r11,8
        val += (uint8_t)uart_getchar();
 160:	f8 00 00 45 	calli 274 <uart_getchar>
 164:	35 8c ff ff 	addi r12,r12,-1
 168:	b4 2b 58 00 	add r11,r1,r11
    for (i = 0; i < 4; i++) {
 16c:	5d 80 ff fc 	bne r12,r0,15c <main+0x90>
 170:	34 11 00 04 	mvi r17,4
        val <<= 8;
 174:	3d 8c 00 08 	sli r12,r12,8
        val += (uint8_t)uart_getchar();
 178:	f8 00 00 3f 	calli 274 <uart_getchar>
 17c:	36 31 ff ff 	addi r17,r17,-1
 180:	b4 2c 60 00 	add r12,r1,r12
    for (i = 0; i < 4; i++) {
 184:	5e 20 ff fc 	bne r17,r0,174 <main+0xa8>
    			for (p = (int8_t *) start; p < (int8_t *) (start+size); p++)
 188:	b5 8b 60 00 	add r12,r12,r11
 18c:	51 6c ff e6 	bgeu r11,r12,124 <main+0x58>
				uart_putchar( *p );
 190:	41 61 00 00 	lbu r1,(r11+0)
    			for (p = (int8_t *) start; p < (int8_t *) (start+size); p++)
 194:	35 6b 00 01 	addi r11,r11,1
				uart_putchar( *p );
 198:	f8 00 00 41 	calli 29c <uart_putchar>
    			for (p = (int8_t *) start; p < (int8_t *) (start+size); p++)
 19c:	5d 6c ff fd 	bne r11,r12,190 <main+0xc4>
		c = uart_getchar();
 1a0:	f8 00 00 35 	calli 274 <uart_getchar>
	for(;;) {
 1a4:	e3 ff ff e1 	bi 128 <main+0x5c>
		switch (c) {
 1a8:	34 0c 00 04 	mvi r12,4
 1ac:	34 0b 00 00 	mvi r11,0
        val <<= 8;
 1b0:	3d 6b 00 08 	sli r11,r11,8
        val += (uint8_t)uart_getchar();
 1b4:	f8 00 00 30 	calli 274 <uart_getchar>
 1b8:	35 8c ff ff 	addi r12,r12,-1
 1bc:	b4 2b 58 00 	add r11,r1,r11
    for (i = 0; i < 4; i++) {
 1c0:	5d 80 ff fc 	bne r12,r0,1b0 <main+0xe4>
 1c4:	34 11 00 04 	mvi r17,4
        val <<= 8;
 1c8:	3d 8c 00 08 	sli r12,r12,8
        val += (uint8_t)uart_getchar();
 1cc:	f8 00 00 2a 	calli 274 <uart_getchar>
 1d0:	36 31 ff ff 	addi r17,r17,-1
 1d4:	b4 2c 60 00 	add r12,r1,r12
    for (i = 0; i < 4; i++) {
 1d8:	5e 20 ff fc 	bne r17,r0,1c8 <main+0xfc>
    			for (p = (int8_t *) start; p < (int8_t *) (start+size); p++)
 1dc:	b5 8b 60 00 	add r12,r12,r11
 1e0:	55 8b 00 03 	bgu r12,r11,1ec <main+0x120>
		c = uart_getchar();
 1e4:	f8 00 00 24 	calli 274 <uart_getchar>
	for(;;) {
 1e8:	e3 ff ff d0 	bi 128 <main+0x5c>
    				*p = uart_getchar();
 1ec:	f8 00 00 22 	calli 274 <uart_getchar>
 1f0:	31 61 00 00 	sb (r11+0),r1
    			for (p = (int8_t *) start; p < (int8_t *) (start+size); p++)
 1f4:	35 6b 00 01 	addi r11,r11,1
 1f8:	45 6c ff cb 	be r11,r12,124 <main+0x58>
    				*p = uart_getchar();
 1fc:	f8 00 00 1e 	calli 274 <uart_getchar>
 200:	31 61 00 00 	sb (r11+0),r1
    			for (p = (int8_t *) start; p < (int8_t *) (start+size); p++)
 204:	35 6b 00 01 	addi r11,r11,1
 208:	5d 6c ff f9 	bne r11,r12,1ec <main+0x120>
 20c:	e3 ff ff c6 	bi 124 <main+0x58>

00000210 <sleep>:
void sleep(int msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 210:	78 03 00 00 	mvhi r3,0x0
 214:	38 63 03 0c 	ori r3,r3,0x30c
 218:	28 62 00 00 	lw r2,(r3+0)
 21c:	38 03 c3 50 	mvu r3,0xc350
 220:	88 23 08 00 	mul r1,r1,r3
 224:	28 42 00 00 	lw r2,(r2+0)
 228:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 22c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
 230:	34 01 00 0a 	mvi r1,10
 234:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 238:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 23c:	20 21 00 01 	andi r1,r1,0x1
 240:	44 20 ff fe 	be r1,r0,238 <sleep+0x28>
}
 244:	c3 a0 00 00 	ret

00000248 <tic_init>:

void tic_init()
{
	// Setup timer0.0
	timer0->compare0 = (FCPU/1000);
 248:	78 02 00 00 	mvhi r2,0x0
 24c:	38 42 03 10 	ori r2,r2,0x310
 250:	28 41 00 00 	lw r1,(r2+0)
 254:	38 02 c3 50 	mvu r2,0xc350
 258:	28 21 00 00 	lw r1,(r1+0)
 25c:	58 22 00 04 	sw (r1+4),r2
	timer0->counter0 = 0;
 260:	58 20 00 08 	sw (r1+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 264:	34 02 00 0e 	mvi r2,14
 268:	58 22 00 00 	sw (r1+0),r2
}
 26c:	c3 a0 00 00 	ret

00000270 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 270:	c3 a0 00 00 	ret

00000274 <uart_getchar>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 274:	78 02 00 00 	mvhi r2,0x0
 278:	38 42 03 14 	ori r2,r2,0x314
 27c:	28 41 00 00 	lw r1,(r2+0)
 280:	28 22 00 00 	lw r2,(r1+0)
 284:	28 41 00 00 	lw r1,(r2+0)
 288:	20 21 00 01 	andi r1,r1,0x1
 28c:	44 20 ff fe 	be r1,r0,284 <uart_getchar+0x10>
	return uart0->rxtx;
 290:	28 41 00 04 	lw r1,(r2+4)
}
 294:	20 21 00 ff 	andi r1,r1,0xff
 298:	c3 a0 00 00 	ret

0000029c <uart_putchar>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 29c:	78 03 00 00 	mvhi r3,0x0
 2a0:	38 63 03 18 	ori r3,r3,0x318
 2a4:	28 62 00 00 	lw r2,(r3+0)
{
 2a8:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 2ac:	28 43 00 00 	lw r3,(r2+0)
 2b0:	28 62 00 00 	lw r2,(r3+0)
 2b4:	20 42 00 10 	andi r2,r2,0x10
 2b8:	5c 40 ff fe 	bne r2,r0,2b0 <uart_putchar+0x14>
	uart0->rxtx = c;
 2bc:	58 61 00 04 	sw (r3+4),r1
}
 2c0:	c3 a0 00 00 	ret

000002c4 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 2c4:	40 24 00 00 	lbu r4,(r1+0)
 2c8:	44 80 00 0c 	be r4,r0,2f8 <uart_putstr+0x34>
	while (uart0->ucr & UART_BUSY) ;
 2cc:	78 03 00 00 	mvhi r3,0x0
 2d0:	38 63 03 1c 	ori r3,r3,0x31c
 2d4:	28 62 00 00 	lw r2,(r3+0)
 2d8:	28 43 00 00 	lw r3,(r2+0)
 2dc:	28 62 00 00 	lw r2,(r3+0)
 2e0:	20 42 00 10 	andi r2,r2,0x10
 2e4:	5c 40 ff fe 	bne r2,r0,2dc <uart_putstr+0x18>
	uart0->rxtx = c;
 2e8:	58 64 00 04 	sw (r3+4),r4
	while(*c) {
 2ec:	40 24 00 01 	lbu r4,(r1+1)
		uart_putchar(*c);
		c++;
 2f0:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 2f4:	5c 80 ff fa 	bne r4,r0,2dc <uart_putstr+0x18>
	}
}
 2f8:	c3 a0 00 00 	ret
