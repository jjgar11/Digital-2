
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000648  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000250  00000648  00000648  0000069c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000000c  00000898  00000898  000008ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  000008a4  000008a4  000008f8  2**2
                  ALLOC
  4 .debug_frame  00000184  00000000  00000000  000008f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   00000a2f  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 00000531  00000000  00000000  000014ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_loc    00000497  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000068  00000000  00000000  00001e73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_ranges 00000040  00000000  00000000  00001edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line   00000bc9  00000000  00000000  00001f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000283  00000000  00000000  00002ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment      00000013  00000000  00000000  00002d67  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 82 	calli 2d4 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 08 b0 	ori gp,gp,0x8b0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 08 a4 	ori r1,r1,0x8a4
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 09 28 	ori r3,r3,0x928

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 5b 	calli 2a8 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <hexprint>:

#include "soc-hw.h"

void hexprint(unsigned int hexval)
{
 208:	37 9c ff e8 	addi sp,sp,-24
 20c:	5b 8b 00 10 	sw (sp+16),r11
 210:	5b 8c 00 0c 	sw (sp+12),r12
 214:	5b 8d 00 08 	sw (sp+8),r13
 218:	5b 9d 00 04 	sw (sp+4),ra
  unsigned char digit[8];
  int pos;
  uart_putstr("0x");
 21c:	78 02 00 00 	mvhi r2,0x0
 220:	38 42 06 5c 	ori r2,r2,0x65c
{
 224:	b8 20 58 00 	mv r11,r1
  uart_putstr("0x");
 228:	28 41 00 00 	lw r1,(r2+0)
 22c:	37 8c 00 14 	addi r12,sp,20
 230:	f8 00 00 88 	calli 450 <uart_putstr>
  for(pos = 0; pos < 8; pos++)
 234:	37 83 00 1c 	addi r3,sp,28
  uart_putstr("0x");
 238:	b9 80 10 00 	mv r2,r12
    {
      digit[pos] = (hexval & 0x0F);  /* last hexit */
 23c:	21 61 00 0f 	andi r1,r11,0xf
 240:	30 41 00 00 	sb (r2+0),r1
      hexval = hexval >> 4;
 244:	34 42 00 01 	addi r2,r2,1
 248:	01 6b 00 04 	srui r11,r11,4
  for(pos = 0; pos < 8; pos++)
 24c:	5c 43 ff fc 	bne r2,r3,23c <hexprint+0x34>
 250:	37 8b 00 1b 	addi r11,sp,27
    }
  for(pos = 7; pos > -1; pos--)
    {
      if( digit[pos] < 0x0A)
 254:	34 0d 00 09 	mvi r13,9
 258:	e0 00 00 02 	bi 260 <hexprint+0x58>
 25c:	b8 20 58 00 	mv r11,r1
 260:	41 62 00 00 	lbu r2,(r11+0)
        uart_putchar(digit[pos] + '0' );
 264:	34 41 00 30 	addi r1,r2,48
      else
        uart_putchar(digit[pos] + 'A' - 10);
 268:	34 43 00 37 	addi r3,r2,55
        uart_putchar(digit[pos] + '0' );
 26c:	20 21 00 ff 	andi r1,r1,0xff
      if( digit[pos] < 0x0A)
 270:	54 4d 00 0c 	bgu r2,r13,2a0 <hexprint+0x98>
        uart_putchar(digit[pos] + 'A' - 10);
 274:	f8 00 00 6d 	calli 428 <uart_putchar>
  for(pos = 7; pos > -1; pos--)
 278:	35 61 ff ff 	addi r1,r11,-1
 27c:	5d 6c ff f8 	bne r11,r12,25c <hexprint+0x54>
    }
  uart_putchar('.');
 280:	34 01 00 2e 	mvi r1,46
 284:	f8 00 00 69 	calli 428 <uart_putchar>
}
 288:	2b 9d 00 04 	lw ra,(sp+4)
 28c:	2b 8b 00 10 	lw r11,(sp+16)
 290:	2b 8c 00 0c 	lw r12,(sp+12)
 294:	2b 8d 00 08 	lw r13,(sp+8)
 298:	37 9c 00 18 	addi sp,sp,24
 29c:	c3 a0 00 00 	ret
        uart_putchar(digit[pos] + 'A' - 10);
 2a0:	20 61 00 ff 	andi r1,r3,0xff
 2a4:	e3 ff ff f4 	bi 274 <hexprint+0x6c>

000002a8 <main>:


int main(int argc, char **argv)
{
 2a8:	37 9c ff f8 	addi sp,sp,-8
 2ac:	5b 8b 00 08 	sw (sp+8),r11
 2b0:	5b 9d 00 04 	sw (sp+4),ra
  //gpio0->oe = 0x00000000;
  //gpio0->out = 0;
  irq_disable();
  while(1){ /* loop forever until u-boot gets booted or the board is reset */
    //gpio0->out = 255;
    uart_putstr("Hello World!!\r\n");
 2b4:	78 01 00 00 	mvhi r1,0x0
 2b8:	38 21 06 60 	ori r1,r1,0x660
 2bc:	28 2b 00 00 	lw r11,(r1+0)
  irq_disable();
 2c0:	fb ff ff a3 	calli 14c <irq_disable>
    uart_putstr("Hello World!!\r\n");
 2c4:	b9 60 08 00 	mv r1,r11
 2c8:	f8 00 00 62 	calli 450 <uart_putstr>
  while(1){ /* loop forever until u-boot gets booted or the board is reset */
 2cc:	e3 ff ff fe 	bi 2c4 <main+0x1c>

000002d0 <isr_null>:
 2d0:	c3 a0 00 00 	ret

000002d4 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 2d4:	37 9c ff f0 	addi sp,sp,-16
 2d8:	5b 8b 00 10 	sw (sp+16),r11
 2dc:	5b 8c 00 0c 	sw (sp+12),r12
 2e0:	5b 8d 00 08 	sw (sp+8),r13
 2e4:	5b 9d 00 04 	sw (sp+4),ra
	int i;

	for(i=0; i<32; i++) {
 2e8:	78 02 00 00 	mvhi r2,0x0
 2ec:	38 42 06 64 	ori r2,r2,0x664
 2f0:	28 4b 00 00 	lw r11,(r2+0)
{
 2f4:	b8 20 60 00 	mv r12,r1
	for(i=0; i<32; i++) {
 2f8:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 2fc:	21 81 00 01 	andi r1,r12,0x1
 300:	44 20 00 03 	be r1,r0,30c <irq_handler+0x38>
 304:	29 61 00 00 	lw r1,(r11+0)
 308:	d8 20 00 00 	call r1
		pending >>= 1;
 30c:	35 6b 00 04 	addi r11,r11,4
 310:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 314:	5d ab ff fa 	bne r13,r11,2fc <irq_handler+0x28>
	}
}
 318:	2b 9d 00 04 	lw ra,(sp+4)
 31c:	2b 8b 00 10 	lw r11,(sp+16)
 320:	2b 8c 00 0c 	lw r12,(sp+12)
 324:	2b 8d 00 08 	lw r13,(sp+8)
 328:	37 9c 00 10 	addi sp,sp,16
 32c:	c3 a0 00 00 	ret

00000330 <isr_init>:

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 330:	78 02 00 00 	mvhi r2,0x0
 334:	38 42 06 68 	ori r2,r2,0x668
 338:	28 41 00 00 	lw r1,(r2+0)
 33c:	78 02 00 00 	mvhi r2,0x0
 340:	38 42 06 6c 	ori r2,r2,0x66c
 344:	28 43 00 00 	lw r3,(r2+0)
 348:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 34c:	58 23 00 00 	sw (r1+0),r3
	for(i=0; i<32; i++)
 350:	34 21 00 04 	addi r1,r1,4
 354:	5c 22 ff fe 	bne r1,r2,34c <isr_init+0x1c>
}
 358:	c3 a0 00 00 	ret

0000035c <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 35c:	78 04 00 00 	mvhi r4,0x0
 360:	38 84 06 70 	ori r4,r4,0x670
 364:	3c 23 00 02 	sli r3,r1,2
 368:	28 81 00 00 	lw r1,(r4+0)
 36c:	b4 23 08 00 	add r1,r1,r3
 370:	58 22 00 00 	sw (r1+0),r2
}
 374:	c3 a0 00 00 	ret

00000378 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 378:	78 03 00 00 	mvhi r3,0x0
 37c:	38 63 06 74 	ori r3,r3,0x674
 380:	3c 22 00 02 	sli r2,r1,2
 384:	28 61 00 00 	lw r1,(r3+0)
 388:	78 03 00 00 	mvhi r3,0x0
 38c:	38 63 06 78 	ori r3,r3,0x678
 390:	b4 22 08 00 	add r1,r1,r2
 394:	28 62 00 00 	lw r2,(r3+0)
 398:	58 22 00 00 	sw (r1+0),r2
}
 39c:	c3 a0 00 00 	ret

000003a0 <sleep>:
void sleep(int msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 3a0:	78 03 00 00 	mvhi r3,0x0
 3a4:	38 63 06 7c 	ori r3,r3,0x67c
 3a8:	28 62 00 00 	lw r2,(r3+0)
 3ac:	08 21 61 a8 	muli r1,r1,25000
 3b0:	28 42 00 00 	lw r2,(r2+0)
 3b4:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3b8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
 3bc:	34 01 00 0a 	mvi r1,10
 3c0:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 3c4:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3c8:	20 21 00 01 	andi r1,r1,0x1
 3cc:	44 20 ff fe 	be r1,r0,3c4 <sleep+0x24>
}
 3d0:	c3 a0 00 00 	ret

000003d4 <tic_init>:

void tic_init()
{
	// Setup timer0.0
	timer0->compare0 = (FCPU/1000);
 3d4:	78 02 00 00 	mvhi r2,0x0
 3d8:	38 42 06 80 	ori r2,r2,0x680
 3dc:	28 41 00 00 	lw r1,(r2+0)
 3e0:	34 02 61 a8 	mvi r2,25000
 3e4:	28 21 00 00 	lw r1,(r1+0)
 3e8:	58 22 00 04 	sw (r1+4),r2
	timer0->counter0 = 0;
 3ec:	58 20 00 08 	sw (r1+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 3f0:	34 02 00 0e 	mvi r2,14
 3f4:	58 22 00 00 	sw (r1+0),r2
}
 3f8:	c3 a0 00 00 	ret

000003fc <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 3fc:	c3 a0 00 00 	ret

00000400 <uart_getchar>:

unsigned char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 400:	78 02 00 00 	mvhi r2,0x0
 404:	38 42 06 84 	ori r2,r2,0x684
 408:	28 41 00 00 	lw r1,(r2+0)
 40c:	28 22 00 00 	lw r2,(r1+0)
 410:	28 41 00 00 	lw r1,(r2+0)
 414:	20 21 00 01 	andi r1,r1,0x1
 418:	44 20 ff fe 	be r1,r0,410 <uart_getchar+0x10>
	return (uart0->rxtx) & 0xFF;
 41c:	28 41 00 04 	lw r1,(r2+4)
}
 420:	20 21 00 ff 	andi r1,r1,0xff
 424:	c3 a0 00 00 	ret

00000428 <uart_putchar>:

void uart_putchar(unsigned char c)
{
	while (uart0->ucr & UART_BUSY) ;
 428:	78 03 00 00 	mvhi r3,0x0
 42c:	38 63 06 88 	ori r3,r3,0x688
 430:	28 62 00 00 	lw r2,(r3+0)
{
 434:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 438:	28 43 00 00 	lw r3,(r2+0)
 43c:	28 62 00 00 	lw r2,(r3+0)
 440:	20 42 00 10 	andi r2,r2,0x10
 444:	5c 40 ff fe 	bne r2,r0,43c <uart_putchar+0x14>
	uart0->rxtx = c;
 448:	58 61 00 04 	sw (r3+4),r1
}
 44c:	c3 a0 00 00 	ret

00000450 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 450:	40 24 00 00 	lbu r4,(r1+0)
 454:	44 80 00 0c 	be r4,r0,484 <uart_putstr+0x34>
	while (uart0->ucr & UART_BUSY) ;
 458:	78 03 00 00 	mvhi r3,0x0
 45c:	38 63 06 8c 	ori r3,r3,0x68c
 460:	28 62 00 00 	lw r2,(r3+0)
 464:	28 43 00 00 	lw r3,(r2+0)
 468:	28 62 00 00 	lw r2,(r3+0)
 46c:	20 42 00 10 	andi r2,r2,0x10
 470:	5c 40 ff fe 	bne r2,r0,468 <uart_putstr+0x18>
	uart0->rxtx = c;
 474:	58 64 00 04 	sw (r3+4),r4
	while(*c) {
 478:	40 24 00 01 	lbu r4,(r1+1)
		uart_putchar(*c);
		c++;
 47c:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 480:	5c 80 ff fa 	bne r4,r0,468 <uart_putstr+0x18>
	}
}
 484:	c3 a0 00 00 	ret

00000488 <crc16_ccitt>:
	0xef1f,0xff3e,0xcf5d,0xdf7c,0xaf9b,0xbfba,0x8fd9,0x9ff8,
	0x6e17,0x7e36,0x4e55,0x5e74,0x2e93,0x3eb2,0x0ed1,0x1ef0
};
  
unsigned short crc16_ccitt(const void *buf, int len)
{
 488:	b8 20 18 00 	mv r3,r1
	int counter;
	unsigned short crc = 0;
	for( counter = 0; counter < len; counter++)
 48c:	4c 02 00 12 	bge r0,r2,4d4 <crc16_ccitt+0x4c>
 490:	78 01 00 00 	mvhi r1,0x0
 494:	38 21 06 90 	ori r1,r1,0x690
 498:	28 26 00 00 	lw r6,(r1+0)
 49c:	b4 62 28 00 	add r5,r3,r2
	unsigned short crc = 0;
 4a0:	34 01 00 00 	mvi r1,0
		crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buf++)&0x00FF];
 4a4:	40 64 00 00 	lbu r4,(r3+0)
 4a8:	00 22 00 08 	srui r2,r1,8
 4ac:	3c 21 00 08 	sli r1,r1,8
 4b0:	98 44 10 00 	xor r2,r2,r4
 4b4:	3c 42 00 01 	sli r2,r2,1
 4b8:	34 63 00 01 	addi r3,r3,1
 4bc:	b4 c2 10 00 	add r2,r6,r2
 4c0:	2c 42 00 00 	lhu r2,(r2+0)
 4c4:	98 22 08 00 	xor r1,r1,r2
 4c8:	20 21 ff ff 	andi r1,r1,0xffff
	for( counter = 0; counter < len; counter++)
 4cc:	5c 65 ff f6 	bne r3,r5,4a4 <crc16_ccitt+0x1c>
	return crc;
}
 4d0:	c3 a0 00 00 	ret
	unsigned short crc = 0;
 4d4:	34 01 00 00 	mvi r1,0
}
 4d8:	c3 a0 00 00 	ret

000004dc <rxmodem>:

int rxmodem(unsigned char *dest)
{
 4dc:	37 9c ff dc 	addi sp,sp,-36
 4e0:	5b 8b 00 24 	sw (sp+36),r11
 4e4:	5b 8c 00 20 	sw (sp+32),r12
 4e8:	5b 8d 00 1c 	sw (sp+28),r13
 4ec:	5b 8e 00 18 	sw (sp+24),r14
 4f0:	5b 8f 00 14 	sw (sp+20),r15
 4f4:	5b 90 00 10 	sw (sp+16),r16
 4f8:	5b 91 00 0c 	sw (sp+12),r17
 4fc:	5b 92 00 08 	sw (sp+8),r18
 500:	5b 9d 00 04 	sw (sp+4),ra
 504:	b8 20 60 00 	mv r12,r1
	unsigned short crc, tcrc;
	int i, len = 0;
        unsigned char pid = 1;

	uart_getchar();
 508:	fb ff ff be 	calli 400 <uart_getchar>
 50c:	78 01 04 00 	mvhi r1,0x400
        for(i = 0; i < 0x4000000; i++) { asm("nop;"); }   
 510:	34 00 00 00 	nop
 514:	34 21 ff ff 	addi r1,r1,-1
 518:	5c 20 ff fe 	bne r1,r0,510 <rxmodem+0x34>
	uart_putchar('C');
 51c:	78 02 00 00 	mvhi r2,0x0
 520:	38 42 06 94 	ori r2,r2,0x694
 524:	34 01 00 43 	mvi r1,67
 528:	28 4f 00 00 	lw r15,(r2+0)
 52c:	b9 80 68 00 	mv r13,r12
 530:	fb ff ff be 	calli 428 <uart_putchar>
 534:	34 11 ff 7e 	mvi r17,-130
 538:	35 8e 00 80 	addi r14,r12,128
 53c:	ca 2d 88 00 	sub r17,r17,r13
 540:	35 8c 00 82 	addi r12,r12,130
	{
		unsigned char c, pid1, pid2;

		c = uart_getchar() & 0xFF;

		if (c != SOH)
 544:	34 12 00 01 	mvi r18,1
		c = uart_getchar() & 0xFF;
 548:	fb ff ff ae 	calli 400 <uart_getchar>
        unsigned char pid = 1;
 54c:	34 10 00 01 	mvi r16,1
 550:	b6 2c 58 00 	add r11,r17,r12
		if (c != SOH)
 554:	5c 32 00 2b 	bne r1,r18,600 <rxmodem+0x124>
			}
			else
				return 0;
		}

		pid1 = uart_getchar() & 0xFF;
 558:	fb ff ff aa 	calli 400 <uart_getchar>
 55c:	b8 20 58 00 	mv r11,r1
		pid2 = uart_getchar() & 0xFF;
 560:	fb ff ff a8 	calli 400 <uart_getchar>

		if ((pid1 & 0xFF) != (~pid2 & 0xFF))
 564:	a4 20 10 00 	not r2,r1
 568:	20 42 00 ff 	andi r2,r2,0xff
 56c:	fc 4b 10 00 	cmpne r2,r2,r11
			return 0;

		if (pid1 != pid)
 570:	fe 0b 08 00 	cmpne r1,r16,r11
 574:	b8 41 08 00 	or r1,r2,r1
 578:	5c 20 00 24 	bne r1,r0,608 <rxmodem+0x12c>
 57c:	b9 a0 58 00 	mv r11,r13
			return 0;

		for (i = 0; i < 130; i++)
			*dest++ = uart_getchar();
 580:	fb ff ff a0 	calli 400 <uart_getchar>
 584:	35 6b 00 01 	addi r11,r11,1
 588:	31 61 ff ff 	sb (r11+-1),r1
		for (i = 0; i < 130; i++)
 58c:	5d 6c ff fd 	bne r11,r12,580 <rxmodem+0xa4>

		crc = crc16_ccitt (dest - 130, 128);
 590:	b9 a0 28 00 	mv r5,r13
	unsigned short crc = 0;
 594:	34 03 00 00 	mvi r3,0
		crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buf++)&0x00FF];
 598:	41 a4 00 00 	lbu r4,(r13+0)
 59c:	00 62 00 08 	srui r2,r3,8
 5a0:	3c 63 00 08 	sli r3,r3,8
 5a4:	98 44 10 00 	xor r2,r2,r4
 5a8:	3c 42 00 01 	sli r2,r2,1
 5ac:	35 ad 00 01 	addi r13,r13,1
 5b0:	b5 e2 10 00 	add r2,r15,r2
 5b4:	2c 42 00 00 	lhu r2,(r2+0)
 5b8:	98 62 18 00 	xor r3,r3,r2
 5bc:	20 63 ff ff 	andi r3,r3,0xffff
	for( counter = 0; counter < len; counter++)
 5c0:	5d ae ff f6 	bne r13,r14,598 <rxmodem+0xbc>
		tcrc = (*(dest - 2)<<8) + *(dest - 1);
 5c4:	41 a2 00 00 	lbu r2,(r13+0)
 5c8:	35 ae 00 80 	addi r14,r13,128
 5cc:	35 8c 00 80 	addi r12,r12,128
 5d0:	3c 42 00 08 	sli r2,r2,8
 5d4:	b4 41 08 00 	add r1,r2,r1
		if (crc != tcrc)
 5d8:	20 21 ff ff 	andi r1,r1,0xffff
 5dc:	5c 23 00 0b 	bne r1,r3,608 <rxmodem+0x12c>
		else
		{
			pid = (pid + 1) & 0xFF;
			dest -= 2;
			len += 128;
			uart_putchar(ACK);
 5e0:	34 01 00 06 	mvi r1,6
 5e4:	34 ad 00 80 	addi r13,r5,128
 5e8:	fb ff ff 90 	calli 428 <uart_putchar>
			pid = (pid + 1) & 0xFF;
 5ec:	36 10 00 01 	addi r16,r16,1
		c = uart_getchar() & 0xFF;
 5f0:	fb ff ff 84 	calli 400 <uart_getchar>
			pid = (pid + 1) & 0xFF;
 5f4:	22 10 00 ff 	andi r16,r16,0xff
	while(1)
 5f8:	b6 2c 58 00 	add r11,r17,r12
		if (c != SOH)
 5fc:	44 32 ff d7 	be r1,r18,558 <rxmodem+0x7c>
			if (c == EOT)
 600:	34 02 00 04 	mvi r2,4
 604:	44 22 00 0e 	be r1,r2,63c <rxmodem+0x160>
				return 0;
 608:	34 0b 00 00 	mvi r11,0
		}
	}
}
 60c:	b9 60 08 00 	mv r1,r11
 610:	2b 9d 00 04 	lw ra,(sp+4)
 614:	2b 8b 00 24 	lw r11,(sp+36)
 618:	2b 8c 00 20 	lw r12,(sp+32)
 61c:	2b 8d 00 1c 	lw r13,(sp+28)
 620:	2b 8e 00 18 	lw r14,(sp+24)
 624:	2b 8f 00 14 	lw r15,(sp+20)
 628:	2b 90 00 10 	lw r16,(sp+16)
 62c:	2b 91 00 0c 	lw r17,(sp+12)
 630:	2b 92 00 08 	lw r18,(sp+8)
 634:	37 9c 00 24 	addi sp,sp,36
 638:	c3 a0 00 00 	ret
				uart_putchar(ACK);
 63c:	34 01 00 06 	mvi r1,6
 640:	fb ff ff 7a 	calli 428 <uart_putchar>
				return len;
 644:	e3 ff ff f2 	bi 60c <rxmodem+0x130>
