
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000360  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000000  00000360  00000360  000003b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data         00000000  00000360  00000360  000003b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000000  00000360  00000360  000003b4  2**0
                  ALLOC
  4 .debug_frame  00000054  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000129  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000a7  00000000  00000000  00000531  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000020  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000302  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000012c  00000000  00000000  000008fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000012  00000000  00000000  00000a26  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 03 	calli 20 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_crt0>:
  20:	78 1c 00 00 	mvhi sp,0x0
  24:	3b 9c 0f fc 	ori sp,sp,0xffc
  28:	78 1a 00 00 	mvhi gp,0x0
  2c:	3b 5a 03 60 	ori gp,gp,0x360
  30:	78 01 00 00 	mvhi r1,0x0
  34:	38 21 03 60 	ori r1,r1,0x360
  38:	78 03 00 00 	mvhi r3,0x0
  3c:	38 63 03 60 	ori r3,r3,0x360

00000040 <.clearBSS>:
  40:	44 23 00 04 	be r1,r3,50 <.callMain>
  44:	58 20 00 00 	sw (r1+0),r0
  48:	34 21 00 04 	addi r1,r1,4
  4c:	e3 ff ff fd 	bi 40 <.clearBSS>

00000050 <.callMain>:
  50:	34 01 00 00 	mvi r1,0
  54:	34 02 00 00 	mvi r2,0
  58:	34 03 00 00 	mvi r3,0
  5c:	f8 00 00 13 	calli a8 <main>

00000060 <irq_enable>:
  60:	34 01 00 01 	mvi r1,1
  64:	d0 01 00 00 	wcsr IE,r1
  68:	c3 a0 00 00 	ret

0000006c <irq_mask>:
  6c:	34 01 00 0f 	mvi r1,15
  70:	d0 21 00 00 	wcsr IM,r1
  74:	c3 a0 00 00 	ret

00000078 <irq_disable>:
  78:	34 01 00 00 	mvi r1,0
  7c:	d0 01 00 00 	wcsr IE,r1
  80:	c3 a0 00 00 	ret

00000084 <jump>:
  84:	c0 20 00 00 	b r1

00000088 <halt>:
  88:	e0 00 00 00 	bi 88 <halt>

0000008c <function>:
int function(int x){
  8c:	37 9c ff f8 	addi sp,sp,-8
  90:	5b 9d 00 04 	sw (sp+4),ra
  94:	5b 81 00 08 	sw (sp+8),r1
  return x;
  98:	2b 81 00 08 	lw r1,(sp+8)
}
  9c:	2b 9d 00 04 	lw ra,(sp+4)
  a0:	37 9c 00 08 	addi sp,sp,8
  a4:	c3 a0 00 00 	ret

000000a8 <main>:

int main(void)
{
  a8:	37 9c ff d8 	addi sp,sp,-40
  ac:	5b 9d 00 04 	sw (sp+4),ra
/*
   Operaciones de acceso a memoria
*/


  data8  = (volatile unsigned char  *)(0x00004000);
  b0:	34 01 40 00 	mvi r1,16384
  b4:	5b 81 00 24 	sw (sp+36),r1
  data16 = (volatile unsigned short *)(0x00002000);
  b8:	34 01 20 00 	mvi r1,8192
  bc:	5b 81 00 20 	sw (sp+32),r1
  data32 = (volatile unsigned int   *)(0x00003000);
  c0:	34 01 30 00 	mvi r1,12288
  c4:	5b 81 00 1c 	sw (sp+28),r1

  *data8  = 0x44;
  c8:	2b 81 00 24 	lw r1,(sp+36)
  cc:	34 02 00 44 	mvi r2,68
  d0:	30 22 00 00 	sb (r1+0),r2
  data8++;
  d4:	2b 81 00 24 	lw r1,(sp+36)
  d8:	34 21 00 01 	addi r1,r1,1
  dc:	5b 81 00 24 	sw (sp+36),r1
  *data8  = 0x66;
  e0:	2b 81 00 24 	lw r1,(sp+36)
  e4:	34 02 00 66 	mvi r2,102
  e8:	30 22 00 00 	sb (r1+0),r2
  data8++;
  ec:	2b 81 00 24 	lw r1,(sp+36)
  f0:	34 21 00 01 	addi r1,r1,1
  f4:	5b 81 00 24 	sw (sp+36),r1
  *data8  = 0x55;
  f8:	2b 81 00 24 	lw r1,(sp+36)
  fc:	34 02 00 55 	mvi r2,85
 100:	30 22 00 00 	sb (r1+0),r2
  data8++;
 104:	2b 81 00 24 	lw r1,(sp+36)
 108:	34 21 00 01 	addi r1,r1,1
 10c:	5b 81 00 24 	sw (sp+36),r1
  *data8  = 0x22;
 110:	2b 81 00 24 	lw r1,(sp+36)
 114:	34 02 00 22 	mvi r2,34
 118:	30 22 00 00 	sb (r1+0),r2
  data8++;
 11c:	2b 81 00 24 	lw r1,(sp+36)
 120:	34 21 00 01 	addi r1,r1,1
 124:	5b 81 00 24 	sw (sp+36),r1
  *data8  = 0x11;
 128:	2b 81 00 24 	lw r1,(sp+36)
 12c:	34 02 00 11 	mvi r2,17
 130:	30 22 00 00 	sb (r1+0),r2
 
  *data16 = 0x2020;
 134:	2b 81 00 20 	lw r1,(sp+32)
 138:	34 02 20 20 	mvi r2,8224
 13c:	0c 22 00 00 	sh (r1+0),r2
  data16++;
 140:	2b 81 00 20 	lw r1,(sp+32)
 144:	34 21 00 02 	addi r1,r1,2
 148:	5b 81 00 20 	sw (sp+32),r1
  *data16 = 0x2121;
 14c:	2b 81 00 20 	lw r1,(sp+32)
 150:	34 02 21 21 	mvi r2,8481
 154:	0c 22 00 00 	sh (r1+0),r2
  data16++;
 158:	2b 81 00 20 	lw r1,(sp+32)
 15c:	34 21 00 02 	addi r1,r1,2
 160:	5b 81 00 20 	sw (sp+32),r1
  *data16 = 0x2222;
 164:	2b 81 00 20 	lw r1,(sp+32)
 168:	34 02 22 22 	mvi r2,8738
 16c:	0c 22 00 00 	sh (r1+0),r2
  data16++;
 170:	2b 81 00 20 	lw r1,(sp+32)
 174:	34 21 00 02 	addi r1,r1,2
 178:	5b 81 00 20 	sw (sp+32),r1
 
  *data32 = 0x40403030;
 17c:	2b 82 00 1c 	lw r2,(sp+28)
 180:	78 01 40 40 	mvhi r1,0x4040
 184:	38 21 30 30 	ori r1,r1,0x3030
 188:	58 41 00 00 	sw (r2+0),r1
  data32++;
 18c:	2b 81 00 1c 	lw r1,(sp+28)
 190:	34 21 00 04 	addi r1,r1,4
 194:	5b 81 00 1c 	sw (sp+28),r1
  *data32 = 0x31313131;
 198:	2b 82 00 1c 	lw r2,(sp+28)
 19c:	78 01 31 31 	mvhi r1,0x3131
 1a0:	38 21 31 31 	ori r1,r1,0x3131
 1a4:	58 41 00 00 	sw (r2+0),r1


  data32 ++;
 1a8:	2b 81 00 1c 	lw r1,(sp+28)
 1ac:	34 21 00 04 	addi r1,r1,4
 1b0:	5b 81 00 1c 	sw (sp+28),r1
  result1 = *data32;
 1b4:	2b 81 00 1c 	lw r1,(sp+28)
 1b8:	28 21 00 00 	lw r1,(r1+0)
 1bc:	5b 81 00 18 	sw (sp+24),r1
  data32 ++;
 1c0:	2b 81 00 1c 	lw r1,(sp+28)
 1c4:	34 21 00 04 	addi r1,r1,4
 1c8:	5b 81 00 1c 	sw (sp+28),r1
  result2 = *data32;
 1cc:	2b 81 00 1c 	lw r1,(sp+28)
 1d0:	28 21 00 00 	lw r1,(r1+0)
 1d4:	5b 81 00 14 	sw (sp+20),r1
  data32 ++;
 1d8:	2b 81 00 1c 	lw r1,(sp+28)
 1dc:	34 21 00 04 	addi r1,r1,4
 1e0:	5b 81 00 1c 	sw (sp+28),r1
  result3 = *data32;
 1e4:	2b 81 00 1c 	lw r1,(sp+28)
 1e8:	28 21 00 00 	lw r1,(r1+0)
 1ec:	5b 81 00 10 	sw (sp+16),r1

/*
  Operaciones aritméticas
*/

  op1 = 0xAA;
 1f0:	34 01 00 aa 	mvi r1,170
 1f4:	5b 81 00 0c 	sw (sp+12),r1
  op2 = 0x55;
 1f8:	34 01 00 55 	mvi r1,85
 1fc:	5b 81 00 08 	sw (sp+8),r1

  result1 = op1 + op2;
 200:	2b 82 00 0c 	lw r2,(sp+12)
 204:	2b 81 00 08 	lw r1,(sp+8)
 208:	b4 41 08 00 	add r1,r2,r1
 20c:	5b 81 00 18 	sw (sp+24),r1
  result2 = op1 - op2;
 210:	2b 82 00 0c 	lw r2,(sp+12)
 214:	2b 81 00 08 	lw r1,(sp+8)
 218:	c8 41 08 00 	sub r1,r2,r1
 21c:	5b 81 00 14 	sw (sp+20),r1
  result3 = op1 | op2;
 220:	2b 82 00 0c 	lw r2,(sp+12)
 224:	2b 81 00 08 	lw r1,(sp+8)
 228:	b8 41 08 00 	or r1,r2,r1
 22c:	5b 81 00 10 	sw (sp+16),r1
  
  data32 ++;
 230:	2b 81 00 1c 	lw r1,(sp+28)
 234:	34 21 00 04 	addi r1,r1,4
 238:	5b 81 00 1c 	sw (sp+28),r1
  *data32 = result1;
 23c:	2b 81 00 1c 	lw r1,(sp+28)
 240:	2b 82 00 18 	lw r2,(sp+24)
 244:	58 22 00 00 	sw (r1+0),r2
  data32 ++;
 248:	2b 81 00 1c 	lw r1,(sp+28)
 24c:	34 21 00 04 	addi r1,r1,4
 250:	5b 81 00 1c 	sw (sp+28),r1
  *data32 = result2;
 254:	2b 81 00 1c 	lw r1,(sp+28)
 258:	2b 82 00 14 	lw r2,(sp+20)
 25c:	58 22 00 00 	sw (r1+0),r2
  data32 ++;
 260:	2b 81 00 1c 	lw r1,(sp+28)
 264:	34 21 00 04 	addi r1,r1,4
 268:	5b 81 00 1c 	sw (sp+28),r1
  *data32 = result3;
 26c:	2b 81 00 1c 	lw r1,(sp+28)
 270:	2b 82 00 10 	lw r2,(sp+16)
 274:	58 22 00 00 	sw (r1+0),r2
  saltos
*/



  for(loop = 0; loop == 10; loop++){
 278:	34 01 00 00 	mvi r1,0
 27c:	33 81 00 2b 	sb (sp+43),r1
 280:	e0 00 00 04 	bi 290 <main+0x1e8>
 284:	43 81 00 2b 	lbu r1,(sp+43)
 288:	34 21 00 01 	addi r1,r1,1
 28c:	33 81 00 2b 	sb (sp+43),r1
 290:	43 82 00 2b 	lbu r2,(sp+43)
 294:	34 01 00 0a 	mvi r1,10
 298:	44 41 ff fb 	be r2,r1,284 <main+0x1dc>
  }

  for(loop = 0; loop < 10; loop++){
 29c:	34 01 00 00 	mvi r1,0
 2a0:	33 81 00 2b 	sb (sp+43),r1
 2a4:	e0 00 00 04 	bi 2b4 <main+0x20c>
 2a8:	43 81 00 2b 	lbu r1,(sp+43)
 2ac:	34 21 00 01 	addi r1,r1,1
 2b0:	33 81 00 2b 	sb (sp+43),r1
 2b4:	43 81 00 2b 	lbu r1,(sp+43)
 2b8:	34 02 00 09 	mvi r2,9
 2bc:	50 41 ff fb 	bgeu r2,r1,2a8 <main+0x200>
  }

  for(loop = 0; loop > 10; loop++){
 2c0:	34 01 00 00 	mvi r1,0
 2c4:	33 81 00 2b 	sb (sp+43),r1
 2c8:	e0 00 00 04 	bi 2d8 <main+0x230>
 2cc:	43 81 00 2b 	lbu r1,(sp+43)
 2d0:	34 21 00 01 	addi r1,r1,1
 2d4:	33 81 00 2b 	sb (sp+43),r1
 2d8:	43 82 00 2b 	lbu r2,(sp+43)
 2dc:	34 01 00 0a 	mvi r1,10
 2e0:	54 41 ff fb 	bgu r2,r1,2cc <main+0x224>
  }

  loop = 0;
 2e4:	34 01 00 00 	mvi r1,0
 2e8:	33 81 00 2b 	sb (sp+43),r1
  while(loop < 10){
 2ec:	e0 00 00 04 	bi 2fc <main+0x254>
    loop++;
 2f0:	43 81 00 2b 	lbu r1,(sp+43)
 2f4:	34 21 00 01 	addi r1,r1,1
 2f8:	33 81 00 2b 	sb (sp+43),r1
  while(loop < 10){
 2fc:	43 81 00 2b 	lbu r1,(sp+43)
 300:	34 02 00 09 	mvi r2,9
 304:	50 41 ff fb 	bgeu r2,r1,2f0 <main+0x248>
/*
  llamado a funciones
*/

  
  result1 = function(0x30);
 308:	34 01 00 30 	mvi r1,48
 30c:	fb ff ff 60 	calli 8c <function>
 310:	5b 81 00 18 	sw (sp+24),r1


/*
  Comunicación con periféricos
*/
      data32 = (volatile unsigned int   *)(0x20000000);
 314:	78 01 20 00 	mvhi r1,0x2000
 318:	5b 81 00 1c 	sw (sp+28),r1
      data32++;
 31c:	2b 81 00 1c 	lw r1,(sp+28)
 320:	34 21 00 04 	addi r1,r1,4
 324:	5b 81 00 1c 	sw (sp+28),r1
      *data32 = 0xAA;
 328:	2b 81 00 1c 	lw r1,(sp+28)
 32c:	34 02 00 aa 	mvi r2,170
 330:	58 22 00 00 	sw (r1+0),r2
      data32 = (volatile unsigned int   *)(0x40000000);
 334:	78 01 40 00 	mvhi r1,0x4000
 338:	5b 81 00 1c 	sw (sp+28),r1
      *data32 = 0x55;
 33c:	2b 81 00 1c 	lw r1,(sp+28)
 340:	34 02 00 55 	mvi r2,85
 344:	58 22 00 00 	sw (r1+0),r2
      data32 = (volatile unsigned int   *)(0x60000000);
 348:	78 01 60 00 	mvhi r1,0x6000
 34c:	5b 81 00 1c 	sw (sp+28),r1
      *data32 = 0xFF;
 350:	2b 81 00 1c 	lw r1,(sp+28)
 354:	34 02 00 ff 	mvi r2,255
 358:	58 22 00 00 	sw (r1+0),r2
      
  while(1){
 35c:	e0 00 00 00 	bi 35c <main+0x2b4>
